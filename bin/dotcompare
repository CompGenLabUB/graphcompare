#!/usr/bin/perl


#===============================================================================
# MODULES
#===============================================================================

use warnings;
use strict;
use Pod::Usage;
use Cwd 'abs_path';
use lib '/home/sergio/code/dotcompare/lib';
use Dot::Compare qw(compare_dots);
use Getopt::Long qw(:config no_ignore_case);



#===============================================================================
# VARIABLES AND OPTIONS
#===============================================================================
our $PROGRAM       = "dotcompare";
our $VERSION       = 'v0.5.0';
our $USER          = $ENV{ USER };
our $W_DIRECTORY   = $ENV{ PWD };
our $INSTALL_PATH  = get_installpath();


# If no arguments provided
pod2usage( -verbose => 1,  
           -output  => \*STDOUT   ) unless @ARGV;

my %options = ();

GetOptions (
    \%options, 
    'help|?'     ,
    "files=s"    ,
    "colors=s"   ,
    "out=s"      ,
    "table=s"    ,
    "venn=s"     ,
    "web=s"      ,
    "stats"      ,
    "insensitive",
    "Test"       ,
    "debug"      
 ); 


# If option --help
pod2usage( -verbose => 1,  
           -output  => \*STDOUT   ) if $options{help};

my @files = split /,/, $options{files} if defined $options{files};

# If no files or too many files
if (@files == 0) {
    error("You have to introduce at least 1 DOT file \n\n\t" . 
          'perl dotcompare -f file1,file2,file3...', 1
         );
} elsif (@files == 5 and $options{colors} ne "LARGE") {
    error("Too many files to use color palette $options{colors}\n". 
          "Changing color palette to LARGE\n");
    $options{colors} = "LARGE";
} elsif (@files > 5) {
    error("Too many files to use the default color palettes.\n".
          "Will generate one using Color::Spectrum\n");
}


# DEFAULT COLOR PALETTE
if (not defined $options{colors}) {
    $options{colors} = "SOFT";
}

#===============================================================================
# MAIN
#===============================================================================

# START REPORT
my $start_time   = time();
my $current_time = localtime();
print STDERR "\nPROGRAM STARTED\n",
             "\tProgram         $PROGRAM\n",
             "\tVersion         $VERSION\n",
             "\tUser            $USER\n",
             "\tWorking dir     $W_DIRECTORY\n",
             "\tColor Profile   $options{colors}\n",
             "\tInput files     ", join("\n\t\t\t", @files), "\n\n",
             "\tStart time      $current_time\n\n";
#--


# RUN THE MODULE
compare_dots(\@files, \%options);


# END REPORT
my $end_time  = time();
$current_time = localtime();
my $sec = $end_time - $start_time;

my $hours = ($sec/3600) % 24;
my $minutes = ($sec/60) % 60;   
my $seconds = $sec % 60;           

my @out_files = grep {$_} ($options{out}, $options{table}, $options{venn}, $options{web});
print STDERR "\nPROGRAM FINISHED\n",
             "\tOutput files \t", join("\n\t\t\t", @out_files), "\n\n",
             "\tEnd time \t$current_time\n\n",
             "\tJob took ~ $hours hours, $minutes minutes and $seconds seconds\n\n"; 
#--


#===============================================================================
# FUNCTIONS 
#===============================================================================
#--------------------------------------------------------------------------------
sub get_installpath {
    my $path = abs_path($0);
    $path =~ s/(.+)\/.*?$/$1\//;
    return($path);
}


#--------------------------------------------------------------------------------
sub error {
    my $string = shift;
    my $fatal  = shift;
    my @lines = split /\n/, $string;

    my $error_msg = $fatal ? "FATAL" : "MINOR";
    print STDERR "\n# [$error_msg ERROR]\n";
    print STDERR "# $_\n" foreach (@lines);    

    if ($fatal) {
        print STDERR "\n\n# Use dotcompare -h to get help.\n\n";
        exit(1);
    } else {
        print STDERR "\n\n";
    }

}